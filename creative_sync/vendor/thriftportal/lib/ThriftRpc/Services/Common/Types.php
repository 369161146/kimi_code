<?php
namespace Services\Common;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class searchObjectClass {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $distinct = false;
  /**
   * @var string
   */
  public $fields = "";
  /**
   * @var string
   */
  public $table = "";
  /**
   * @var string
   */
  public $publisher_id = "";
  /**
   * @var string
   */
  public $app_id = "";
  /**
   * @var string
   */
  public $unit_id = "";
  /**
   * @var string
   */
  public $advertiser_id = "";
  /**
   * @var string
   */
  public $advertiser_id2 = "";
  /**
   * @var string
   */
  public $campaign_id = "";
  /**
   * @var string
   */
  public $creative_id = "";
  /**
   * @var string
   */
  public $algorithm = "";
  /**
   * @var string
   */
  public $scenario = "";
  /**
   * @var string
   */
  public $ad_type = "";
  /**
   * @var string
   */
  public $platform = "";
  /**
   * @var string
   */
  public $os_version = "";
  /**
   * @var string
   */
  public $sdk_version = "";
  /**
   * @var string
   */
  public $app_version = "";
  /**
   * @var string
   */
  public $country_code = "";
  /**
   * @var string
   */
  public $ad_source_id = "";
  /**
   * @var string
   */
  public $log_type = "";
  /**
   * @var string
   */
  public $position_id = "";
  /**
   * @var string
   */
  public $exchange = "";
  /**
   * @var string
   */
  public $date = "";
  /**
   * @var string
   */
  public $timestamp = "";
  /**
   * @var string
   */
  public $groupBy = "";
  /**
   * @var string
   */
  public $havingGreater = "";
  /**
   * @var string
   */
  public $havingLess = "";
  /**
   * @var string
   */
  public $orderBy = "";
  /**
   * @var int
   */
  public $limit = 10;
  /**
   * @var int
   */
  public $offset = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'distinct',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'fields',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'table',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'publisher_id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'app_id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'unit_id',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'advertiser_id',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'advertiser_id2',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'campaign_id',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'creative_id',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'algorithm',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'scenario',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'ad_type',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'os_version',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'sdk_version',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'app_version',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'country_code',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'ad_source_id',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'log_type',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'position_id',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'exchange',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'groupBy',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'havingGreater',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'havingLess',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'orderBy',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        30 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['distinct'])) {
        $this->distinct = $vals['distinct'];
      }
      if (isset($vals['fields'])) {
        $this->fields = $vals['fields'];
      }
      if (isset($vals['table'])) {
        $this->table = $vals['table'];
      }
      if (isset($vals['publisher_id'])) {
        $this->publisher_id = $vals['publisher_id'];
      }
      if (isset($vals['app_id'])) {
        $this->app_id = $vals['app_id'];
      }
      if (isset($vals['unit_id'])) {
        $this->unit_id = $vals['unit_id'];
      }
      if (isset($vals['advertiser_id'])) {
        $this->advertiser_id = $vals['advertiser_id'];
      }
      if (isset($vals['advertiser_id2'])) {
        $this->advertiser_id2 = $vals['advertiser_id2'];
      }
      if (isset($vals['campaign_id'])) {
        $this->campaign_id = $vals['campaign_id'];
      }
      if (isset($vals['creative_id'])) {
        $this->creative_id = $vals['creative_id'];
      }
      if (isset($vals['algorithm'])) {
        $this->algorithm = $vals['algorithm'];
      }
      if (isset($vals['scenario'])) {
        $this->scenario = $vals['scenario'];
      }
      if (isset($vals['ad_type'])) {
        $this->ad_type = $vals['ad_type'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['os_version'])) {
        $this->os_version = $vals['os_version'];
      }
      if (isset($vals['sdk_version'])) {
        $this->sdk_version = $vals['sdk_version'];
      }
      if (isset($vals['app_version'])) {
        $this->app_version = $vals['app_version'];
      }
      if (isset($vals['country_code'])) {
        $this->country_code = $vals['country_code'];
      }
      if (isset($vals['ad_source_id'])) {
        $this->ad_source_id = $vals['ad_source_id'];
      }
      if (isset($vals['log_type'])) {
        $this->log_type = $vals['log_type'];
      }
      if (isset($vals['position_id'])) {
        $this->position_id = $vals['position_id'];
      }
      if (isset($vals['exchange'])) {
        $this->exchange = $vals['exchange'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['groupBy'])) {
        $this->groupBy = $vals['groupBy'];
      }
      if (isset($vals['havingGreater'])) {
        $this->havingGreater = $vals['havingGreater'];
      }
      if (isset($vals['havingLess'])) {
        $this->havingLess = $vals['havingLess'];
      }
      if (isset($vals['orderBy'])) {
        $this->orderBy = $vals['orderBy'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
    }
  }

  public function getName() {
    return 'searchObjectClass';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->distinct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fields);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->publisher_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unit_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->advertiser_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->advertiser_id2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->campaign_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creative_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->algorithm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scenario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ad_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->os_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sdk_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ad_source_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->log_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->position_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exchange);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->havingGreater);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->havingLess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('searchObjectClass');
    if ($this->distinct !== null) {
      $xfer += $output->writeFieldBegin('distinct', TType::BOOL, 1);
      $xfer += $output->writeBool($this->distinct);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fields !== null) {
      $xfer += $output->writeFieldBegin('fields', TType::STRING, 2);
      $xfer += $output->writeString($this->fields);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table !== null) {
      $xfer += $output->writeFieldBegin('table', TType::STRING, 3);
      $xfer += $output->writeString($this->table);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publisher_id !== null) {
      $xfer += $output->writeFieldBegin('publisher_id', TType::STRING, 4);
      $xfer += $output->writeString($this->publisher_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_id !== null) {
      $xfer += $output->writeFieldBegin('app_id', TType::STRING, 5);
      $xfer += $output->writeString($this->app_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unit_id !== null) {
      $xfer += $output->writeFieldBegin('unit_id', TType::STRING, 6);
      $xfer += $output->writeString($this->unit_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->advertiser_id !== null) {
      $xfer += $output->writeFieldBegin('advertiser_id', TType::STRING, 7);
      $xfer += $output->writeString($this->advertiser_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->advertiser_id2 !== null) {
      $xfer += $output->writeFieldBegin('advertiser_id2', TType::STRING, 8);
      $xfer += $output->writeString($this->advertiser_id2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->campaign_id !== null) {
      $xfer += $output->writeFieldBegin('campaign_id', TType::STRING, 9);
      $xfer += $output->writeString($this->campaign_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creative_id !== null) {
      $xfer += $output->writeFieldBegin('creative_id', TType::STRING, 10);
      $xfer += $output->writeString($this->creative_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->algorithm !== null) {
      $xfer += $output->writeFieldBegin('algorithm', TType::STRING, 11);
      $xfer += $output->writeString($this->algorithm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scenario !== null) {
      $xfer += $output->writeFieldBegin('scenario', TType::STRING, 12);
      $xfer += $output->writeString($this->scenario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_type !== null) {
      $xfer += $output->writeFieldBegin('ad_type', TType::STRING, 13);
      $xfer += $output->writeString($this->ad_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 14);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_version !== null) {
      $xfer += $output->writeFieldBegin('os_version', TType::STRING, 15);
      $xfer += $output->writeString($this->os_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sdk_version !== null) {
      $xfer += $output->writeFieldBegin('sdk_version', TType::STRING, 16);
      $xfer += $output->writeString($this->sdk_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_version !== null) {
      $xfer += $output->writeFieldBegin('app_version', TType::STRING, 17);
      $xfer += $output->writeString($this->app_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country_code !== null) {
      $xfer += $output->writeFieldBegin('country_code', TType::STRING, 18);
      $xfer += $output->writeString($this->country_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_source_id !== null) {
      $xfer += $output->writeFieldBegin('ad_source_id', TType::STRING, 19);
      $xfer += $output->writeString($this->ad_source_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->log_type !== null) {
      $xfer += $output->writeFieldBegin('log_type', TType::STRING, 20);
      $xfer += $output->writeString($this->log_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position_id !== null) {
      $xfer += $output->writeFieldBegin('position_id', TType::STRING, 21);
      $xfer += $output->writeString($this->position_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exchange !== null) {
      $xfer += $output->writeFieldBegin('exchange', TType::STRING, 22);
      $xfer += $output->writeString($this->exchange);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 23);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 24);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupBy !== null) {
      $xfer += $output->writeFieldBegin('groupBy', TType::STRING, 25);
      $xfer += $output->writeString($this->groupBy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->havingGreater !== null) {
      $xfer += $output->writeFieldBegin('havingGreater', TType::STRING, 26);
      $xfer += $output->writeString($this->havingGreater);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->havingLess !== null) {
      $xfer += $output->writeFieldBegin('havingLess', TType::STRING, 27);
      $xfer += $output->writeString($this->havingLess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderBy !== null) {
      $xfer += $output->writeFieldBegin('orderBy', TType::STRING, 28);
      $xfer += $output->writeString($this->orderBy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 29);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 30);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class resultClass {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var string
   */
  public $result = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
    }
  }

  public function getName() {
    return 'resultClass';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('resultClass');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 3);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


